# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "@drake//tools/vector_gen:vector_gen.bzl",
    "drake_cc_vector_gen_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

drake_cc_binary(
    name = "oscillating-plane",
    srcs = [
        "examples/oscillating-plane/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "shaking-sphere",
    srcs = [
        "examples/shaking-sphere/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "dough-rolling",
    srcs = [
        "examples/dough-rolling/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        ":StvkHenckyWithVonMisesModel",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "stick-slip-transition",
    srcs = [
        "examples/stick-slip-transition/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "twist",
    srcs = [
        "examples/twist/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        ":StvkHenckyWithVonMisesModel",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "slide-under-slope",
    srcs = [
        "examples/slide-under-slope/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "advecting-ball",
    srcs = [
        "examples/advecting-ball/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "advecting-ball-with-walls",
    srcs = [
        "examples/advecting-ball-with-walls/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "pingpong",
    srcs = [
        "examples/pingpong/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "colliding-sphere",
    srcs = [
        "examples/colliding-sphere/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "rotating-sphere",
    srcs = [
        "examples/rotating-sphere/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "compress-box",
    srcs = [
        "examples/compress-box/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "close-boxes",
    srcs = [
        "examples/close-boxes/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_binary(
    name = "close-wall-and-falling-box",
    srcs = [
        "examples/close-wall-and-falling-box/main.cpp",
    ],
    deps = [
        ":CorotatedElasticModel",
        ":MPMDriver",
        ":SpatialVelocityTimeDependent",
        ":StvkHenckyWithVonMisesModel",
        "//common:essential",
        "//math:geometric_transform",
        "@partio",
    ],
)

drake_cc_library(
    name = "BSpline",
    srcs = [
        "BSpline.cc",
    ],
    hdrs = [
        "BSpline.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "MathUtils",
    srcs = [
        "MathUtils.cc",
    ],
    hdrs = [
        "MathUtils.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "Utils",
    hdrs = [
        "Utils.h",
    ],
    deps = [
        "//common:essential",
    ]
)

drake_cc_library(
    name = "SpatialVelocityTimeDependent",
    srcs = [
        "SpatialVelocityTimeDependent.cc",
    ],
    hdrs = [
        "SpatialVelocityTimeDependent.h",
    ],
    deps = [
        "//common:essential",
        "//multibody/fem:matrix_utilities",
        "//multibody/math:spatial_algebra",
    ],
)

drake_cc_library(
    name = "ElastoPlasticModel",
    srcs = [
        "ElastoPlasticModel.cc",
    ],
    hdrs = [
        "ElastoPlasticModel.h",
    ],
    deps = [
        "//common:essential",
        "//multibody/fem:matrix_utilities",
    ],
)

drake_cc_library(
    name = "CorotatedElasticModel",
    srcs = [
        "CorotatedElasticModel.cc",
    ],
    hdrs = [
        "CorotatedElasticModel.h",
    ],
    deps = [
        ":ElastoPlasticModel",
        "//common:essential",
        "//multibody/fem:matrix_utilities",
    ],
)

drake_cc_library(
    name = "StvkHenckyWithVonMisesModel",
    srcs = [
        "StvkHenckyWithVonMisesModel.cc",
    ],
    hdrs = [
        "StvkHenckyWithVonMisesModel.h",
    ],
    deps = [
        ":ElastoPlasticModel",
        "//common:essential",
        "//multibody/fem:matrix_utilities",
    ],
)

drake_cc_library(
    name = "Particles",
    srcs = [
        "Particles.cc",
    ],
    hdrs = [
        "Particles.h",
    ],
    deps = [
        ":ElastoPlasticModel",
        ":MathUtils",
        ":TotalMassAndMomentum",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "Grid",
    srcs = [
        "Grid.cc",
    ],
    hdrs = [
        "Grid.h",
    ],
    deps = [
        ":KinematicCollisionObjects",
        ":TotalMassAndMomentum",
        "//common:essential",
        "//geometry/proximity:posed_half_space",
    ],
)

drake_cc_library(
    name = "SparseGrid",
    srcs = [
        "SparseGrid.cc",
    ],
    hdrs = [
        "SparseGrid.h",
    ],
    deps = [
        ":KinematicCollisionObjects",
        ":Particles",
        ":TotalMassAndMomentum",
        ":Utils",
        "//common:essential",
        "//geometry/proximity:posed_half_space",
    ],
)

drake_cc_library(
    name = "CollisionObject",
    srcs = [
        "CollisionObject.cc",
    ],
    hdrs = [
        "CollisionObject.h",
    ],
    deps = [
        ":AnalyticLevelSet",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//math:geometric_transform",
        "//multibody/fem:matrix_utilities",
        "//multibody/math:spatial_algebra",
    ],
)

drake_cc_library(
    name = "KinematicCollisionObjects",
    srcs = [
        "KinematicCollisionObjects.cc",
    ],
    hdrs = [
        "KinematicCollisionObjects.h",
    ],
    deps = [
        ":CollisionObject",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "GravitationalForce",
    srcs = [
        "GravitationalForce.cc",
    ],
    hdrs = [
        "GravitationalForce.h",
    ],
    deps = [
        ":SparseGrid",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "AnalyticLevelSet",
    srcs = [
        "AnalyticLevelSet.cc",
    ],
    hdrs = [
        "AnalyticLevelSet.h",
    ],
    deps = [
        "//common:essential",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "TotalMassAndMomentum",
    hdrs = [
        "TotalMassAndMomentum.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "MPMRunTimeStatistics",
    hdrs = [
        "MPMRunTimeStatistics.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "MPMTransfer",
    srcs = [
        "MPMTransfer.cc",
    ],
    hdrs = [
        "MPMTransfer.h",
    ],
    deps = [
        ":BSpline",
        ":Particles",
        ":SparseGrid",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "particles_to_bgeo",
    srcs = [
        "particles_to_bgeo.cc",
    ],
    hdrs = [
        "particles_to_bgeo.h",
    ],
    deps = [
        "//common:essential",
        "//common:filesystem",
        "//common:find_resource",
        "//common:temp_directory",
        "@partio",
    ],
)

drake_cc_library(
    name = "poisson_disk_sampling",
    hdrs = [
        "poisson_disk_sampling.h",
        "//common:eigen_types.h",
    ],
)

drake_cc_library(
    name = "MPMParameters",
    hdrs = [
        "MPMParameters.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "MPMDriver",
    srcs = [
        "MPMDriver.cc",
    ],
    hdrs = [
        "MPMDriver.h",
    ],
    deps = [
        ":AnalyticLevelSet",
        ":ElastoPlasticModel",
        ":GravitationalForce",
        ":MPMParameters",
        ":MPMRunTimeStatistics",
        ":MPMTransfer",
        ":Particles",
        ":SparseGrid",
        ":particles_to_bgeo",
        ":poisson_disk_sampling",
        "//common:essential",
        "//math:geometric_transform",
        "//multibody/math:spatial_algebra",
    ],
)

drake_cc_googletest(
    name = "particles_to_bgeo_test",
    deps = [
        ":particles_to_bgeo",
        "//common:filesystem",
        "//common:temp_directory",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "BSpline_test",
    deps = [
        ":BSpline",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "MathUtils_test",
    deps = [
        ":MathUtils",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "Particles_test",
    deps = [
        ":CorotatedElasticModel",
        ":Particles",
        ":StvkHenckyWithVonMisesModel",
        ":TotalMassAndMomentum",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "Grid_test",
    deps = [
        ":AnalyticLevelSet",
        ":Grid",
        ":SpatialVelocityTimeDependent",
        ":TotalMassAndMomentum",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry/proximity:posed_half_space",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "ElastoPlasticModel_test",
    deps = [
        ":CorotatedElasticModel",
        ":ElastoPlasticModel",
        ":StvkHenckyWithVonMisesModel",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "CollisionObject_test",
    deps = [
        ":CollisionObject",
        ":SpatialVelocityTimeDependent",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry/proximity:posed_half_space",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "GravitationalForce_test",
    deps = [
        ":GravitationalForce",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "AnalyticLevelSet_test",
    deps = [
        ":AnalyticLevelSet",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "MPMTransfer_test",
    deps = [
        ":BSpline",
        ":CorotatedElasticModel",
        ":Grid",
        ":MPMTransfer",
        ":Particles",
        ":TotalMassAndMomentum",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

add_lint_tests()
